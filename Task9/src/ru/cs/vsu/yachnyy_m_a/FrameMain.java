package ru.cs.vsu.yachnyy_m_a;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import ru.cs.vsu.yachnyy_m_a.util.ArrayUtils;
import ru.cs.vsu.yachnyy_m_a.util.JTableUtils;
import ru.cs.vsu.yachnyy_m_a.util.ListUtils;
import ru.cs.vsu.yachnyy_m_a.util.SwingUtils;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.List;

public class FrameMain extends JFrame {

    private JMenuBar menuBarMain;
    private JMenu menuLookAndFeel;

    private JPanel panelMain;
    private JTable TableInput;
    private JTable TableOutput;
    private JButton ButtonLoadInputFromFile;
    private JButton ButtonProcess;
    private JButton ButtonSaveOutputIntoFile;
    private JButton ButtonFillWithRandomNumbers;

    private JFileChooser InputFileChooser;
    private JFileChooser OutputFileChooser;

    public FrameMain() {
        this.setTitle("Task9");
        this.setContentPane(panelMain);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        TableInput.setRowHeight(25);
        TableOutput.setRowHeight(25);
        JTableUtils.initJTableForArray(TableInput, 40, false, true, false, true);
        JTableUtils.initJTableForArray(TableOutput, 40, false, true, false, false);

        InputFileChooser = new JFileChooser();
        OutputFileChooser = new JFileChooser();
        InputFileChooser.setCurrentDirectory(new File("."));
        OutputFileChooser.setCurrentDirectory(new File("."));
        FileFilter filter = new FileNameExtensionFilter("Text files", "txt");
        InputFileChooser.addChoosableFileFilter(filter);
        OutputFileChooser.addChoosableFileFilter(filter);

        OutputFileChooser.setAcceptAllFileFilterUsed(false);
        OutputFileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        OutputFileChooser.setApproveButtonText("Save");

        menuBarMain = new JMenuBar();
        setJMenuBar(menuBarMain);

        menuLookAndFeel = new JMenu();
        menuLookAndFeel.setText("Вид");
        menuBarMain.add(menuLookAndFeel);
        SwingUtils.initLookAndFeelMenu(menuLookAndFeel);

        JTableUtils.writeArrayToJTable(TableInput, new int[]{1, 2, 3, 4, 5});

        ButtonFillWithRandomNumbers.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int[] randArr = ArrayUtils.createRandomIntArray(TableInput.getColumnCount(), -20, 20);
                JTableUtils.writeArrayToJTable(TableInput, randArr);
            }
        });

        ButtonProcess.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                List<Integer> list = ListUtils.readIntegerListFromJTable(TableInput);
                Task9.process(list);
                JTableUtils.writeArrayToJTable(TableOutput, ListUtils.toIntArray(list));
            }
        });

        ButtonLoadInputFromFile.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (InputFileChooser.showOpenDialog(panelMain) == JFileChooser.APPROVE_OPTION) {
                        int[] arr = ArrayUtils.readIntArrayFromFile(InputFileChooser.getSelectedFile().getPath());
                        JTableUtils.writeArrayToJTable(TableInput, arr);
                    }
                } catch (Exception exception) {
                    SwingUtils.showErrorMessageBox(exception);
                }
            }
        });

        ButtonSaveOutputIntoFile.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (OutputFileChooser.showOpenDialog(panelMain) == JFileChooser.APPROVE_OPTION) {
                        ArrayUtils.writeArrayToFile(OutputFileChooser.getSelectedFile().getPath(), JTableUtils.readIntArrayFromJTable(TableOutput));
                    }
                } catch (Exception exception) {
                    SwingUtils.showErrorMessageBox(exception);
                }
            }
        });

        this.pack();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridLayoutManager(6, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panelMain.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ButtonLoadInputFromFile = new JButton();
        ButtonLoadInputFromFile.setText("Загрузить таблицу из файла");
        panel1.add(ButtonLoadInputFromFile, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtonProcess = new JButton();
        ButtonProcess.setText("Обработать");
        panel1.add(ButtonProcess, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtonFillWithRandomNumbers = new JButton();
        ButtonFillWithRandomNumbers.setText("Заполнить случайными числами");
        panel1.add(ButtonFillWithRandomNumbers, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Ввод:");
        panelMain.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panelMain.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(453, 80), null, 0, false));
        TableInput = new JTable();
        scrollPane1.setViewportView(TableInput);
        final JScrollPane scrollPane2 = new JScrollPane();
        panelMain.add(scrollPane2, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(453, 50), null, 0, false));
        TableOutput = new JTable();
        scrollPane2.setViewportView(TableOutput);
        final JLabel label2 = new JLabel();
        label2.setText("Вывод:");
        panelMain.add(label2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtonSaveOutputIntoFile = new JButton();
        ButtonSaveOutputIntoFile.setText("Сохранить таблицу в файл");
        panelMain.add(ButtonSaveOutputIntoFile, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }

}
